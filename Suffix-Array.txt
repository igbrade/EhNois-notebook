#include<bits/stdc++.h>

using namespace std;
const int MAXN = 200100;

const int alpha = 300;

int c[20][MAXN] , p[MAXN] , cn[MAXN] , pn[MAXN] , cnt[MAXN];

void suffix_ini(string s){
    int n = s.size();

    for(int i = 0;i < n;i++) cnt[s[i]] ++;
    for(int i = 1;i < alpha;i++) cnt[i] += cnt[i - 1];
    for(int i = n - 1;i >= 0;i--) p[--cnt[s[i]]] = i;

    int cla = 0;
    c[0][p[0]] = 0;

    for(int i = 1;i < n;i++){
        if(s[p[i]] != s[p[i - 1]]) ++cla;
        c[0][p[i]] = cla;
    }
}

void suffix(string s){
    int n = s.size();

    for(int h = 0;(1 << h) < n;h++){
        for(int i = 0;i < n;i++){
            pn[i] = p[i] - (1 << h);
            if(pn[i] < 0) pn[i] += n;
        }

        memset(cnt,0,sizeof cnt);

        for(int i = 0;i < n;i++) cnt[c[h][pn[i]]] ++;
        for(int i = 0;i < n;i++) cnt[i] += cnt[i - 1];
        for(int i = n - 1;i >= 0;i--) p[--cnt[c[h][pn[i]]]] = pn[i];

        int cla = 0;
        cn[p[0]] = 0;

        for(int i = 1;i < n;i++){
            pair<int,int> cur = {c[h][p[i]],c[h][(p[i] + (1 << h)) % n]};
            pair<int,int> pre = {c[h][p[i - 1]],c[h][(p[i - 1] + (1 << h)) % n]};

            if(cur.first != pre.first || cur.second != pre.second) cla ++;
            cn[p[i]] = cla;
        }

        for(int i = 0;i < n;i++) c[h + 1][i] = cn[i];
    }
}

int main(){
    string s;
    cin >> s;

    s += "$";

    suffix_ini(s);
    suffix(s);
}